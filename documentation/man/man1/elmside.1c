ELMSIDE(1)                  General Commands Manual                 ELMSIDE(1)



[1mNAME[0m
       elmside - select element side numbers

[1mSYNOPSIS[0m
       [1melmside  [22m-l  nodelist  -e tecin.dat.partf.elm -n tecin.dat.partf.nps -d
       2|3 [-swicov]

[1mDESCRIPTION[0m
       [1melmside [22mis a support program for finite element code [4mGTECTON[24m, to assist
       in  applying  boundary  conditions along element boundaries and faults.
       For this purpose, it is used in conjunction  with  picknps  (see:  `man
       picknps'),  as  is shown in examples below. There are two possible uses
       of elmside.

       usage [4m1[24m) Returning all the elements that have a side on a given  bound-
       ary of the domain, and the side with which they border on the domain.

       usage  [4m2[24m)  Returning  all  the  elements who have least one vertex in a
       given list of vertices and the weight, which is +/-  dependent  on  the
       normal  vector.  This  can  be  used to distinguish between elements on
       either side of a (not necessarily straight) line  (described  by  those
       points).

       For    both    uses,    the    options   [1m-n   tecin.dat.partf.nps[22m,   [1m-e[0m
       [1mtecin.dat.partf.elm [22mand [1m-l nodelist [22mare mandatory.
       For usage [4m1[24m, the option -s should be added.
       For usage [4m2[24m, the option -s should be omitted

       where tecin.dat.partf.nps is the partitioned list of nodal  points  and
       tecin.dat.partf.elm the partitioned list of elements.

[1mVERSION[0m
       2021

[1mARGUMENTS[0m
       [1m-d 2|3 [22mThe number of dimensions, i.e., 2 or 3.

       [1m-a 1|2|3[0m
              The  algorithm  used to determine sides. 1 = circle center based
              (default); 2 = 2D algorithm based on distance  along  a  polygon
              (from  [1mpolysort[22m); 3 = 2D algorithm based on whether element cen-
              ters are located in- or  outside  an  oriented  (i.e.  spatially
              sorted) closed polygon.

       [1m-e partitioned element file[0m
              [4mpln[24m  or  [4mopn[24m  or [4mf3d[24m format partitioned connectivity file, typi-
              cally tecin.dat.partf.elm

       [1m-l nodelist_file[0m
              List of node numbers, typically as output by [4mpicknps[24m. The  nodes
              in  the list do not need to be spatially sorted for algorithm=1.
              For the other algorithms ([1m-a 2 or 3[22m), the nodes do  need  to  be
              sorted by their coordinates.

       [1m-L loopfile[0m
              List  of  spatially  sorted  coordinates  of a closed loop (same
              begin and end coordinates). Required for algorithm=3 ([1m-a 3[22m).

       [1m-n partitioned nodal point file[0m
              Optional [4mpln[24m of [4mopn[24m or [4mf3d[24m format partitioned nodal point  coor-
              dinate  file,  typically tecin.dat.partf.nps Nodelist is assumed
              to be spatially ordered in this case.  If  these  arguments  are
              given,  element sides are interpreted as fault sides. The output
              consists of the element number, node number,  a  zero,  and  the
              sign.

       [1m-o     [22mProduces [4mopn[24m-compatible output.

       [1m-c     [22mAdds the coordinates of the vertices to the output. This is only
              applied when the output contains one line for each vertex, as in
              usage  2.  In usage 1, when every line contains an element and a
              side number, the coordinates are not displayed.

       [1m-s     [22mOnly output the element ID and the sides  of  the  elements  (in
              1,2,3  in  2D, or in 1,2,3,4 in 3D), according to the convention
              used by pln and f3d. To reiterate:

              2D:   side 1: vertices 1 2         3D:   side 1: vertices 1 2 4
                         2:          2 3                    2:          1 3 2
                         3:          3 1                    3:          1 4 3
                                                            4:          2 3 4

       [1m-w     [22mAdds the weights to the output. One side is assigned the  weight
              +1,  the  other  side  gets  -1.   The sign is determined by the
              orthogonal vector to the vector connecting two arbitrary  points
              that  are relatively far apart in the domain.  (in 2D, at most a
              thousand points are  selected  randomly  (depending  on  whether
              there  are  more  in  the nodelist), and the two points that are
              furthest apart are selected to construct a basis and the orthog-
              onal  vector to determine the sign. In 3D, similarly, a 100 ran-
              dom points are selected and the three  that  span  the  triangle
              with  the  largest  area  are used for the basis.)  This assures
              that the weights of curved surfaces can still be determined rel-
              atively well.

              If  the  orthogonal  vector is positive in x, the weight of that
       side is +1.
              If it is negative in x, the weight is -1.

              If it neutral in x:

              If the orthogonal vector is positive in y, the  weight  of  that
       side is +1.
              If it is negative in y, the weight is -1

              If it neutral in x and neutral in y:

              If  the  orthogonal  vector is positive in z, the weight of that
       side is +1.
              If it is negative in z, the weight is -1

       [1m-i     [22mInvert the weights produced by the -w option.

       [1m-v     [22mVerbose. When this option is added, elmside prints details about
              what it is doing. Mainly for debugging.

[1mEXAMPLES[0m
       Let us have a simple 200 x 200 square domain of 3 x 3 nodes, numbered 1
       through 9.
       Let the domain be divided into triangular elements numbered I to VIII.
       Let us further have a boundary marked 2 (1 is reserved  internally  for
       the  external  boundary)  stretching  vertically from vertex 4 to 6, as
       follows:


                     boundary 2
        +---> x          |
        |                |
        V y             \|/

         1               4               7
         ---------------------------------
         |              /|              /|
         |   VIII     /  |  VI        /  |
         |          /    |          /    |
         |        /      |        /      |
         |      /        |      /        |
         |    /    II    |    /   VII    |
         |  /            |  /            |
         |/            5 |/            8 |
       2 ---------------------------------
         |              /|              /|
         |   III      /  |   IV       /  |
         |          /    |          /    |
         |        /      |        /      |
         |      /        |      /        |
         |    /   I      |    /    V     |
         |  /            |  /            |
         |/              |/              |
         ---------------------------------
         3               6               9

       Let us finally assume the existence of files:
       tecin.dat.partf.nps, containing the partitioned nodal points and
       tecin.dat.partf.elm, containing the partitioned elements, according  to
       the  pln standard (see: `man 7 pln').  The numbering of the elements is
       somewhat illogical, but it is created as such  by  Triangle  (see  `man
       triangle').

       [1mExample 1[22m: Find all the elements attached to node 6.
       [1mCommand  [22mpicknps  -d  2  -n  tecin.dat.nps  -x  100  -y  -200  -e  1  >
       nodelist.dat
       [1mCommand  [22melmside  -d  2  -l  nodelist.dat  -e  tecin.dat.partf.elm   -n
       tecin.dat.partf.nps
       [1mOutput [22m[elem id, node id].

                  1           6
                  4           6
                  5           6

       [1mExample 2[22m: Find all the elements attached with a side to boundary 2.
       [1mCommand [22mpicknps -d 2 -n tecin.dat.nps -m 2 > nodelist.dat
       [1mCommand   [22melmside  -d  2  -l  nodelist.dat  -e  tecin.dat.partf.elm  -n
       tecin.dat.partf.nps -s
       [1mOutput [22mfor every element: [elem id, local side nr.] (see  `man  7  pln'
       for side numbering conventions).

                  1    1
                  2    3
                  4    3
                  6    3

       [1mExample  3  [22mFind all the elements attached with a side or with a single
       point to boundary 2, and on which side they  are.   This  is  typically
       convenient when constructing slippery nodes in GTecton.
       [1mCommand [22mpicknps -n tecin.dat.nps -m 2 > nodelist.dat
       [1mCommand   [22melmside  -d  2  -l  nodelist.dat  -e  tecin.dat.partf.elm  -n
       tecin.dat.partf.nps -w -s
       [1mOutput [22mfor every element/vertex combination:  [elem  id,  node  id,  0,
       weight].  Note: elements that have a side on the boundary (1,2,4 and 6,
       as seen in example 2) will appear twice in the list, once for  each  of
       their vertices on the boundary.

                  1           6    0   -1
                  1           5    0   -1
                  2           4    0   -1
                  2           5    0   -1
                  3           5    0   -1
                  4           6    0    1
                  4           5    0    1
                  5           6    0    1
                  6           5    0    1
                  6           4    0    1
                  7           5    0    1
                  8           4    0   -1

       [1mExample  4  [22mFind all the elements attached with a side or with a single
       point to boundary 2, and their coordinates  of  the  vertices,  and  on
       which  side  they  are.  This is typically convenient when constructing
       slippery nodes in GTecton.
       [1mCommand [22mpicknps -n tecin.dat.nps -m 2 > nodelist.dat
       [1mCommand  [22melmside  -d  2  -l  nodelist.dat  -e  tecin.dat.partf.elm   -n
       tecin.dat.partf.nps -w -c
       [1mOutput  [22mfor  every  element/vertex  combination:  [elem id, node id, 0,
       weight, x, y]. Note: elements that have a side on the  boundary  (1,2,4
       and  6,  as  seen in example 2) will appear twice in the list, once for
       each of their vertices on the boundary.

                  1              6       0      -1       100.00000000000000000
       -200.00000000000000000
                  1              5       0      -1       100.00000000000000000
       -100.00000000000000000
                  2              4       0      -1       100.00000000000000000
       0.00000000000000000
                  2              5       0      -1       100.00000000000000000
       -100.00000000000000000
                  3              5       0      -1       100.00000000000000000
       -100.00000000000000000
                  4              6       0       1       100.00000000000000000
       -200.00000000000000000
                  4              5       0       1       100.00000000000000000
       -100.00000000000000000
                  5              6       0       1       100.00000000000000000
       -200.00000000000000000
                  6              5       0       1       100.00000000000000000
       -100.00000000000000000
                  6              4       0       1       100.00000000000000000
       0.00000000000000000
                  7              5       0       1       100.00000000000000000
       -100.00000000000000000
                  8              4       0      -1       100.00000000000000000
       0.00000000000000000

[1mSEE ALSO[0m
       [4mpicknps(1)[24m, [4mpln(1)[24m, [4mpln(7)[24m, [4mopn(1)[24m, [4mopn(7)[0m

[1mAUTHORS[0m
       Rob Govers, Wienand Drenth, Lukas van de Wiel

[1mBUGS[0m
       The output of [1melmside [22mis sorted by element number, even  if  the  nodes
       input list is sorted differently (e.g., spatially ordered).

       Report bugs to Lukas van de Wiel (L.Y.vanderWiel@uu.nl)



4th Berkeley Distribution        July 6, 2021                       ELMSIDE(1)
